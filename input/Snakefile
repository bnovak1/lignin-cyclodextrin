import json
from pathlib import Path
import numpy as np


configfile: "Snakefile.json"


output_dir = Path("../output/{lignol}/one_BCD")
analysis_dir = Path("../analysis/{lignol}")

# Copy some figures to the writing directory.
writing_dir = Path(
    "..", 
    "writing","HDBSCAN_clustering_for_identification_of_states_with_lignin_dimers_bound_to_cyclodextrin_from_molecular_dynamics_simulations",
    "000_Attachments"
)


# Need to get masses into pdb occupancy column for PLUMED.
# Note that masses guessed by MDAnalysis do not match masses from topology exactly.
rule nowater_pdb:
    input:
        gro=output_dir / "nowater.gro",
    output:
        pdb=str(Path("../analysis/{lignol}/nowater.pdb")),
    run:
        import MDAnalysis as mda

        u = mda.Universe(input.gro, input.gro)
        u.add_TopologyAttr("occupancies")
        u.atoms.occupancies = u.atoms.masses
        u.atoms.write(output.pdb)

rule nowater_pdbs:
    input:
        expand(
            rules.nowater_pdb.output.pdb,
            lignol=config["LIGNOLS"],
        ),


# Compute collective variables using PLUMED.
rule plumed_CVs:
    input:
        plumed=str(Path("{lignol}/CVs.plumed.dat")),
        traj=str(output_dir / "nowater.xtc"),
        pdb=rules.nowater_pdb.output.pdb,
    output:
        colvar=str(analysis_dir / "colvar.dat"),
    shell:
        """
        singularity exec ~/singularity/GROMACS_2018.3-PLUMED_2.6/ plumed driver \
            --plumed {input.plumed} \
            --timestep 4 \
            --mf_xtc {input.traj} \
            --pdb {input.pdb}
        """

rule plumed_CVss:
    input:
        expand(rules.plumed_CVs.output, lignol=config["LIGNOLS"]),


# HDBSCAN clustering.
rule clustering:
    input:
        colvar=rules.plumed_CVs.output.colvar,
        script=Path("../scripts/clustering.py"),
        read_script=Path("../scripts/read_colvar_file.py"),
    output:
        nclust=str(
            analysis_dir / "clustering/HDBSCAN_model/nclusters_{min_samples}.dat"
        ),
    threads: 8
    shell:
        "python {input.script} --colvar {input.colvar} --min_samples {wildcards.min_samples} --nclusters_file {output.nclust}"

rule clusterings:
    input:        
        [
            rules.clustering.output.nclust.format(
                lignol=lignol,
                min_samples=min_samples
            )
            for lignol in config["LIGNOLS"]
            for min_samples in range(
                config["MIN_SAMPLES_RANGE"][lignol][0],
                config["MIN_SAMPLES_RANGE"][lignol][1] + 1,
            )
        ],


# Find the best value for the HDBSCAN min_samples parameter.
rule min_samples:
    input:
        models=lambda wildcards: [
            str(
                Path(
                    analysis_dir,
                    "clustering/HDBSCAN_model",
                    "nclusters_" + str(min_samples) + ".dat",
                )
            )
            for min_samples in range(
                config["MIN_SAMPLES_RANGE"][wildcards.lignol][0],
                config["MIN_SAMPLES_RANGE"][wildcards.lignol][1] + 1,
            )
        ],
        script=Path("../scripts/min_samples.py"),
    output:
        html=str(analysis_dir / "clustering/min_samples.html"),
        png=str(analysis_dir / "clustering/min_samples.png"),
        png_writing = str(writing_dir / "fig-nclusters_{lignol}" / "min_samples.png"),
        min_samples=str(analysis_dir / "clustering/min_samples_best.dat"),
    params:
        drctry=str(analysis_dir / "clustering"),
        min_samples_min=lambda wildcards: config["MIN_SAMPLES_RANGE"][
            wildcards.lignol
        ][0],
        min_samples_max=lambda wildcards: config["MIN_SAMPLES_RANGE"][
            wildcards.lignol
        ][1],
    shell:
        """
        python {input.script} --lignol {wildcards.lignol} \
            --min_samples_rng {params.min_samples_min} {params.min_samples_max} \
            --dir {params.drctry}
        cp {output.png} {output.png_writing}
        """

rule min_sampless:
    input:
        expand(
            rules.min_samples.output,
            lignol=config["LIGNOLS"],
        ),


# Save the best HDBSCAN model.
rule best_model:
    input:
        colvar=rules.plumed_CVs.output.colvar,
        script=Path("../scripts/clustering.py"),
        read_script=Path("../scripts/read_colvar_file.py"),
        min_samples=rules.min_samples.output.min_samples,
    output:
        model=str(analysis_dir / "clustering/HDBSCAN_model/best_model.joblib"),
        nclusters=str(analysis_dir / "clustering/best_model_nclusters.dat"),
    params:
        min_samples=lambda wildcards: np.loadtxt(f"../analysis/{wildcards.lignol}/clustering/min_samples_best.dat", dtype=int)
    shell:
        """
        python {input.script} \
            --colvar {input.colvar} \
            --min_samples {params.min_samples} \
            --model_file {output.model} \
            --nclusters_file {output.nclusters}
        """

rule best_models:
    input:
        expand(rules.best_model.output, lignol=config["LIGNOLS"]),   


# Plot the clusters.
rule plot_clusters:
    input:
        script=Path("../scripts/plot_clusters.py"),
        model=rules.best_model.output.model,
        colvar=rules.plumed_CVs.output.colvar,
    output:
        html=str(analysis_dir / "clustering/clusters.html"),
        json=str(analysis_dir / "clustering/clusters.json"),
        json_writing=str(writing_dir / "fig-clusters_{lignol}" / "clusters.json"),
        png=str(analysis_dir / "clustering/clusters.png"),
        cluster_labels=str(analysis_dir / "clustering/cluster_labels.dat"),
    params:
        drctry=str(analysis_dir / "clustering"),
    shell:
        """
        python ../scripts/plot_clusters.py \
            --lignol {wildcards.lignol} \
            --colvar {input.colvar} \
            --model {input.model} \
            --dir {params.drctry}
        cp {output.json} {output.json_writing}
        """

rule plot_clusterss:
    input:
        expand(
            rules.plot_clusters.output, lignol=config["LIGNOLS"]
        ),


# Save the configurations belonging to each cluster to separate XTC files.
rule cluster_configs:
    input:
        cluster_labels=rules.plot_clusters.output.cluster_labels,
        script=Path("../scripts/cluster_configs.py"),
        gro=str(output_dir / "nowater.gro"),
        xtc=str(output_dir / "nowater.xtc"),
        nclusters=rules.best_model.output.nclusters,
    output:
        xtc=str(analysis_dir / "clustering/cluster_configs_{cluster_id}.xtc"),
    shell:
        "python {input.script} --labels {input.cluster_labels} --gro {input.gro} --xtc_in {input.xtc} --xtc_out {output.xtc} --cluster_id {wildcards.cluster_id}"

rule cluster_configss:
    input:
        lambda wildcards: [
            str(
                Path(
                    "../analysis",
                    lignol,
                    "clustering",
                    "cluster_configs_" + str(cluster_id) + ".xtc",
                )
            )
            for lignol in config["LIGNOLS"]
            for cluster_id in range(
                int(
                    np.loadtxt(
                        str(
                            Path(
                                "../analysis",
                                lignol,
                                "clustering/best_model_nclusters.dat",
                            )
                        )
                    )
                )
            )
        ],


# Create Tcl scripts to draw arrows from lignin head to tail, 
# & from the cyclodextrin COM to the cyclodextrin secondary face oxygen atoms in VMD.
rule vmd_arrows:
    input:
        plumed=str(rules.plumed_CVs.input.plumed),
        script=Path("../scripts/vmd_arrows.py"),
    output:
        tcl=str(analysis_dir / "arrows.tcl"),
    params:
        arrow_length=config["VMD_ARROW_LENGTH"],
    shell:
        "python {input.script} --plumed {input.plumed} --tcl {output.tcl} --arrow_length {params.arrow_length}"

rule vmd_arrowss:
    input:
        expand(rules.vmd_arrows.output, lignol=config["LIGNOLS"]),


# Generate files from config['CENTER_BOUND_CLUSTER_LABELS'].
rule center_bound_cluster_labels:
    input:
        configfile="Snakefile.json",
    output:
        cluster_labels_json=str(analysis_dir / "clustering/center_bound_cluster_labels.json"),
        cluster_labels_list=str(analysis_dir / "clustering/center_bound_cluster_labels.dat"),
    run:
        import json
        import numpy as np

        # Copy JSON from configfile to output.cluster_labels_json
        with open(input.configfile) as f:
            config = json.load(f)
        with open(output.cluster_labels_json, "w") as f:
            json.dump(config["CENTER_BOUND_CLUSTER_LABELS"][wildcards.lignol], f, indent=4)

        # Create a sorted list containing the items in the lists for each key in config["CENTER_BOUND_CLUSTER_LABELS"][wildcards.lignol]
        sorted_labels = sorted(
            label
            for labels in config["CENTER_BOUND_CLUSTER_LABELS"][wildcards.lignol].values()
            for label in labels
        )
        
        # Write sorted_labels to output.cluster_labels_list
        np.savetxt(output.cluster_labels_list, sorted_labels, fmt="%d")

rule center_bound_cluster_labelss:
    input:
        expand(rules.center_bound_cluster_labels.output, lignol=config["LIGNOLS"])


# Generate images of the configurations.
# The .vmd files were created manually.
rule cluster_config_images:
    input:
        pdb=str(rules.nowater_pdb.output.pdb),
        xtc=rules.cluster_configs.output,
        script=Path("../scripts/{lignol}/cluster_configs_{cluster_id}.vmd"),
    output:
        tga=str(analysis_dir / "clustering/cluster_configs_{cluster_id}.tga"),
    threads: 8
    shell:
        """
        vmd -e {input.script}
        """

rule cluster_config_imagess:
    input:
        lambda wildcards: [
            str(
                Path(
                    "../analysis",
                    lignol,
                    "clustering",
                    "cluster_configs_" + str(cluster_id) + ".tga",
                )
            )
            for lignol in config["LIGNOLS"]
            for cluster_id in np.loadtxt(
                rules.center_bound_cluster_labels.output.cluster_labels_list.format(lignol=lignol), dtype=int
            )
        ],


# Add example configurations with vector arrows to the cluster plots.
rule cluster_configs_to_cluster_plots:
    input:
        cluster_plot=rules.plot_clusters.output.png,
        cluster_configs=[
            str(file)
            for file in Path(
                "../analysis/{lignol}/clustering"
            ).glob("cluster_configs_*.tga")
        ],
        script=Path("../scripts/process_cluster_config_images.sh"),
    output:
        cluster_configs_plot=Path(
            "../analysis/{lignol}/clustering/clusters_configs.png"
        ),
        cluster_configs_plot_writing=str(
            writing_dir / "fig-clusters_{lignol}" / "clusters_configs.png"
        ),
    shell:
        """
        bash {input.script} {wildcards.lignol}
        cp {output.cluster_configs_plot} {output.cluster_configs_plot_writing}
        """

rule cluster_configs_to_cluster_plotss:
    input:
        expand(
            rules.cluster_configs_to_cluster_plots.output,
            lignol=config["LIGNOLS"],
        ),

# KDE plots of normal distances for each cluster group
rule cluster_distances_KDE:
    input:
        colvar=rules.plumed_CVs.output.colvar,
        cluster_labels=rules.plot_clusters.output.cluster_labels,
        center_bound_clusters=rules.center_bound_cluster_labels.output.cluster_labels_json,
        script="../scripts/cluster_distances_KDE.py",
    output:
        kde_plot = str(analysis_dir / "clustering/cluster_distances_KDE_{cluster_group}.png"),
        kde_plot_writing = str(
            writing_dir / "fig-kde_{lignol}-{cluster_group}/cluster_distances_KDE_{cluster_group}.png"
        ),
    params:
        drctry=str(analysis_dir / "clustering"),
    shell:
        """
        python {input.script} \
            --lignol {wildcards.lignol} \
            --colvar {input.colvar} \
            --clust_labels {input.cluster_labels} \
            --center_bound_clusters {input.center_bound_clusters} \
            --cluster_group {wildcards.cluster_group} \
            --outdir {params.drctry}
        mogrify -trim {output.kde_plot}
        cp {output.kde_plot} {output.kde_plot_writing}
        """

rule cluster_distances_KDEs:
    input:
        [
            rules.cluster_distances_KDE.output.kde_plot.format(
                lignol=lignol,
                cluster_group=cluster_group
            )
            for lignol in config["LIGNOLS"]
            for cluster_group in config["CENTER_BOUND_CLUSTER_LABELS"][lignol].keys()
        ] + 
        [
            rules.cluster_distances_KDE.output.kde_plot_writing.format(
                lignol=lignol,
                cluster_group=cluster_group
            )
            for lignol in config["LIGNOLS"]
            for cluster_group in config["CENTER_BOUND_CLUSTER_LABELS"][lignol].keys()
        ],

# Fractions of configurations belonging to each cluster.
# The fractions are calculated with respect to the total number of configurations where the lignin dimer is bound to the center of the cyclodextrin.
rule clusters_fractions:
    input:
        cluster_labels=rules.plot_clusters.output.cluster_labels,
        script=Path("../scripts/cluster_fractions.py"),
        center_bound_clusters=rules.center_bound_cluster_labels.output.cluster_labels_json,
    output:
        fractions=str(analysis_dir / "clustering/fractions.csv"),
        fractions_writing=str(writing_dir / "tbl-fractions_{lignol}" / "fractions.csv"),
    shell:
        """
        python {input.script} \
            --labels {input.cluster_labels} \
            --center_bound_clusters {input.center_bound_clusters} \
            --outfile {output.fractions}
        cp {output.fractions} {output.fractions_writing}
        """

rule clusters_fractionss:
    input:
        expand(rules.clusters_fractions.output, lignol=config["LIGNOLS"])


# Bar plots of the fractions of configurations belonging to each cluster compared with previous work.
rule cluster_fractions_comparison:
    input:
        fractions=rules.clusters_fractions.output.fractions,
        fractions_previous=Path("../analysis/{lignol}/previous/bound_fractions.dat"),
        script=Path("../scripts/cluster_fractions_comparison.py"),
    output:
        bar_plot=str(analysis_dir / "clustering/fractions_comparison.png"),
        bar_plot_writing=str(writing_dir / "fig-fractions-comparison_{lignol}" / "fractions_comparison.png"),
    shell:
        """
        python {input.script} \
            --lignol {wildcards.lignol} \
            --fractions {input.fractions} \
            --fractions_previous {input.fractions_previous} \
            --outfile {output.bar_plot}
        cp {output.bar_plot} {output.bar_plot_writing}
        """

rule cluster_fractions_comparisons:
    input:
        expand(rules.cluster_fractions_comparison.output, lignol=config["LIGNOLS"])